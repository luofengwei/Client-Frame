--[[
 * @author PureMVC Lua Native Port by Sean 
 * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.
 * 
 * @class puremvc.SimpleCommand
 * @extends puremvc.Notifier
 *
 * SimpleCommands encapsulate the business logic of your application. Your 
 * subclass should override the #execute method where your business logic will
 * handle the 
 * {@link puremvc.Notification Notification}
 * SimpleCommands封装了应用的业务逻辑。
 * 你的子类应该重载您业务逻辑中处理Notification的execute方法
 * 
 * Take a look at 
 * {@link puremvc.Facade#registerCommand Facade's registerCommand}
 * or {@link puremvc.Controller#registerCommand Controllers registerCommand}
 * methods to see how to add commands to your application.
 * 建议可以看一下Facade的registerCommand或Controllers的registerCommand,查看如何向应用程序添加命令的方法
 * 
 * @constructor
]]
local Notifier = import('..observer.Notifier')

local SimpleCommand = class('SimpleCommand', Notifier)

function SimpleCommand:ctor()
    SimpleCommand.super.ctor(self)  
end
--[[
 * Fulfill the use-case initiated by the given Notification
 * 完成由给定Notification发起的用例
 * 
 * In the Command Pattern, an application use-case typically begins with some
 * user action, which results in a Notification is handled by the business logic
 * in the #execute method of a command.
 * 在命令模式中，应用程序用例通常以那些Command里execute方法处理的Notification的结果的用户操作开始。
 * 
 * @param {puremvc.Notification} notification
 *  The notification to handle.
 * @return {void}
]]
function SimpleCommand:execute(notification)
end

return SimpleCommand


